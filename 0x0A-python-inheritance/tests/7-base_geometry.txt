The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Given two integers, return the sum i.e (a + b).

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

-------------------

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
   
-------------------

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer
   
-------------------

    >>> isinstance(bg, BaseGeometry)
    True
   
-------------------

    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

-------------------

    >>> bg.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

-------------------

    >>> bg.integer_validator("age", 1)
   
-------------------

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0
   
-------------------

    >>> bg.integer_validator("age", -1)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

-------------------

    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

-------------------

    >>> bg.integer_validator("age", [4])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

-------------------

    >>> bg.integer_validator("age", {4,1})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

-------------------

    >>> bg.integer_validator("age", False)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

-------------------

    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

-------------------